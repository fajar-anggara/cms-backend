openapi: "3.0.3"

info:
  version: 3.0.3
  title: "cms-public-api"
  description: |
    
    Dibagian ini akan melayani public access untuk blog (membaca). ada
    
    /api/v1/blog/{user} #Setiap user / blogger dibedakan melalui nusername nya setelah /blog/
    get
      UserLandingPage
    

  contact:
    name: "Moh. Fajar Anggara"
    email: "muhamadfajaranggara@gmail.com"

servers:
  - url: "http://localhost:8080"
    description: "Development server"
  - url: "http://31.97.110.252:8080"
    description: "Production server"

tags:
  - name: BlogController
    description: "Operasi yang berhubungan dengan publik dan pembaca blog"

paths:
  /api/v1/blogs/{user}:
    get:
      tags:
        - BlogController
      operationId: "userLandingPage"
      summary: "Halaman beranda setiap blog yang dipunyai user"
      parameters:
        - name: "user"
          in: path
          description: "Setiap path pertama merupakan user berbeda (pembuat blog yang berbeda)"
          schema:
            type: string
            default: "default"
          example: "Andriana"
          required: true
        - name: "limit"
          in: query
          description: "Jumlah postingan yang akan ditampilkan"
          schema:
            type: integer
            default: 6
            minimum: 1
          example: 1
        - name: "sortBy"
          in: query
          description: "Mengurutkan hasil berdasarkan"
          schema:
            type: string
            enum:
              - "PUBLISHEDAT"
              - "VIEWS"
              - "TITLE"
            default: "PUBLUSHEDAT"
          example: "published_at"
        - name: sortOrder
          in: query
          description: "Arah pengurutan"
          schema:
            type: string
            enum:
              - "ASC"
              - "DSC"
          example: "ASC"
          required: false
        - name: categorySlug
          in: query
          description: "Menampilkan postingan berdasarkan kategori"
          schema:
            type: string
          example: "nama-kategori"
          required: false
        - name: search
          in: query
          description: "Keyword untuk mencari postingan"
          schema:
            type: string
            minimum: 1
            maximum: 225
          example: "Cara membuat cms dengan springboot"
          required: false
      responses:
        "200":
          description: "Query OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BlogFullResponse'

        "500":
          description: "Bad Server"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './general-responses-openapi.yaml#/components/schemas/Error500Response'

  /api/v1/blogs/{user}/{postId}:
    get:
      tags:
        - BlogController
      operationId: singlePost
      description: "Membaca single post"
      parameters:
        - name: "user"
          in: path
          description: "The blogger"
          schema:
            type: integer
            format: int64
            example: 1
          required: true
        - name: postId
          in: path
          description: "ID Artikel yang dibaca"
          schema:
            type: integer
            format: int64
            example: 1
          required: true
      responses:
        "200":
          description: "Query OK"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BlogSingleResponse'

        "500":
          description: "Bad Server"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: './general-responses-openapi.yaml#/components/schemas/Error500Response'


components:
  schemas:
    BlogFullResponse:
      description: "Format untuk response landing page, dll."
      type: object
      properties:
        user:
          description: "Deskripsi pemilik blog / page ini"
          allOf:
            - $ref: './users-openapi.yaml#/components/schemas/UserSimpleResponse'
        posts:
          description: "Menampilkan postingan berdasarkan default sort and order."
          type: object
          properties:
            articles:
                allOf:
                  - $ref: './blogging-openapi.yaml#/components/schemas/ListOfArticleResponses'
            pagination:
              allOf:
                - $ref: '#/components/schemas/PaginationMetadata'
        categories:
            allOf:
              - $ref: './blogging-openapi.yaml#/components/schemas/ListOfCategoryResponses'
      required:
        - user
        - posts
        - categories

    BlogSingleResponse:
      description: "Format untuk single response untuk membaca sebuah artikel."
      type: object
      properties:
        user:
          description: "Deskripsi pemilik blog / page ini"
          allOf:
            - $ref: './users-openapi.yaml#/components/schemas/UserSimpleResponse'
        posts:
          type: object
          properties:
            articles:
              allOf:
                - $ref: './blogging-openapi.yaml#/components/schemas/PostResponse'
            pagination:
              allOf:
                - $ref: '#/components/schemas/PaginationMetadata'
        categories:
            allOf:
              - $ref: './blogging-openapi.yaml#/components/schemas/ListOfCategoryResponses'
      required:
        - user

    PaginationMetadata:
      type: object
      description: "Metadata untuk pagination berbasis offset."
      properties:
        currentPage:
          type: integer
          format: int32
          description: "Nomor halaman saat ini."
          example: 1
        pageSize:
          type: integer
          format: int32
          description: "Jumlah item per halaman."
          example: 10
        totalItems:
          type: integer
          format: int64
          description: "Total jumlah item yang tersedia di seluruh koleksi."
          example: 125
        totalPages:
          type: integer
          format: int32
          description: "Total jumlah halaman yang tersedia."
          example: 13
        hasNextPage:
          type: boolean
          description: "Menunjukkan apakah ada halaman berikutnya."
          example: true
        hasPreviousPage:
          type: boolean
          description: "Menunjukkan apakah ada halaman sebelumnya."
          example: false
      required:
        - currentPage
        - pageSize
        - totalItems
        - totalPages
        - hasNextPage
        - hasPreviousPage
