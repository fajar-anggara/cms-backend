/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.8.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.backendapp.cms.users.endpoint.generated;

import com.backendapp.cms.openapi.dto.ChangePasswordRequest;
import com.backendapp.cms.openapi.dto.Error401Response;
import com.backendapp.cms.openapi.dto.Error403Response;
import com.backendapp.cms.openapi.dto.Error500Response;
import com.backendapp.cms.openapi.dto.GetUser200Response;
import com.backendapp.cms.openapi.dto.RenewPasswordRequest;
import com.backendapp.cms.openapi.dto.Success200Response;
import com.backendapp.cms.openapi.dto.UserGetRefreshPasswordToken200Response;
import com.backendapp.cms.openapi.dto.UserLoginRequest;
import com.backendapp.cms.openapi.dto.UserRegister200Response;
import com.backendapp.cms.openapi.dto.UserRegister400Response;
import com.backendapp.cms.openapi.dto.UserRegisterRequest;
import com.backendapp.cms.openapi.dto.UserUpdateRequest;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-06-19T20:20:03.897328600+07:00[Asia/Jakarta]", comments = "Generator version: 7.8.0")
@Validated
@Tag(name = "UserController", description = "Endpoint api yang berhubungan dengan user/blogger.")
public interface UserControllerApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * PATCH /api/v1/users/me
     * User mengirimkan permintaan mengubah password tanpa lupa password.
     *
     * @param userId  (optional)
     * @param changePasswordRequest  (optional)
     * @return User berhasil mengubah password. (status code 200)
     *         or Bad Request (status code 400)
     *         or Unauthorize / password salah (status code 401)
     *         or Bad server (status code 500)
     */
    @Operation(
            operationId = "changePassword",
            description = "User mengirimkan permintaan mengubah password tanpa lupa password.",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "User berhasil mengubah password.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister200Response.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister400Response.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorize / password salah", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error401Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Bad server", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PATCH,
            value = "/api/v1/users/me",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<UserRegister200Response> _changePassword(
            @Parameter(name = "userId", description = "", in = ParameterIn.COOKIE) @CookieValue(name = "userId", required = false) Long userId,
            @Parameter(name = "ChangePasswordRequest", description = "") @Valid @RequestBody(required = false) ChangePasswordRequest changePasswordRequest
    ) {
        return changePassword(userId, changePasswordRequest);
    }

    // Override this method
    default  ResponseEntity<UserRegister200Response> changePassword(Long userId, ChangePasswordRequest changePasswordRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"role\" : \"BLOGGER\", \"is_enable\" : true, \"bio\" : \"Saya merupakan seorang programer...\", \"profile_picture\" : \"images.com/images.png\", \"id\" : 1, \"username\" : \"andriana\" }, \"success\" : true, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"message\" : \"Field tidak sesuai\", \"errors\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /api/v1/users/me
     * Menghapus user (oleh dirinya sendiri)
     *
     * @param userId User ID (optional)
     * @return Berhasil menghapus user, balikan ke register page (status code 200)
     *         or Unauthorize (status code 401)
     *         or Bad server (status code 500)
     */
    @Operation(
            operationId = "deleteUser",
            description = "Menghapus user (oleh dirinya sendiri)",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Berhasil menghapus user, balikan ke register page", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Success200Response.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorize", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error401Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Bad server", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.DELETE,
            value = "/api/v1/users/me",
            produces = { "application/json" }
    )

    default ResponseEntity<Success200Response> _deleteUser(
            @Parameter(name = "userId", description = "User ID", in = ParameterIn.COOKIE) @CookieValue(name = "userId", required = false) Long userId
    ) {
        return deleteUser(userId);
    }

    // Override this method
    default  ResponseEntity<Success200Response> deleteUser(Long userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/users/me
     * Mendapatkan informasi user/blogger lengkap.
     *
     * @param userId  (required)
     * @return Berhasil, berikan data user/blogger (status code 200)
     *         or Forbidden, anda tidak bisa melakukan operasi ini. (status code 403)
     *         or Bad server (status code 500)
     */
    @Operation(
            operationId = "getUser",
            description = "Mendapatkan informasi user/blogger lengkap.",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Berhasil, berikan data user/blogger", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = GetUser200Response.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden, anda tidak bisa melakukan operasi ini.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error403Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Bad server", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/users/me",
            produces = { "application/json" }
    )

    default ResponseEntity<GetUser200Response> _getUser(
            @NotNull @Parameter(name = "userId", description = "", required = true, in = ParameterIn.COOKIE) @CookieValue(name = "userId") Long userId
    ) {
        return getUser(userId);
    }

    // Override this method
    default  ResponseEntity<GetUser200Response> getUser(Long userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"\", \"success\" : true, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /api/v1/users/me
     * User mengupdate property milik dirinya.
     *
     * @param userId  (optional)
     * @param userUpdateRequest  (optional)
     * @return User berhasil diupdate, kembailkan data user lengkap. (status code 200)
     *         or Bad Request, Field tidak sesuai (status code 400)
     *         or Unauthorized, harap login kembali. (status code 401)
     *         or Forbidden, anda tidak bisa melakukan operasi ini. (status code 403)
     *         or Bad server (status code 500)
     */
    @Operation(
            operationId = "updateUser",
            description = "User mengupdate property milik dirinya.",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "User berhasil diupdate, kembailkan data user lengkap.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = GetUser200Response.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Bad Request, Field tidak sesuai", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister400Response.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Unauthorized, harap login kembali.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error401Response.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden, anda tidak bisa melakukan operasi ini.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error403Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Bad server", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.PUT,
            value = "/api/v1/users/me",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<GetUser200Response> _updateUser(
            @Parameter(name = "userId", description = "", in = ParameterIn.COOKIE) @CookieValue(name = "userId", required = false) Long userId,
            @Parameter(name = "UserUpdateRequest", description = "") @Valid @RequestBody(required = false) UserUpdateRequest userUpdateRequest
    ) {
        return updateUser(userId, userUpdateRequest);
    }

    // Override this method
    default  ResponseEntity<GetUser200Response> updateUser(Long userId, UserUpdateRequest userUpdateRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : \"\", \"success\" : true, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"message\" : \"Field tidak sesuai\", \"errors\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/auth/password : User lupa password dan ingin memperbarui password dengan meminta reset_password_token, diidentifikasi dengan id di cookie.
     *
     * @param userId User ID (required)
     * @return Token dikirim di email. Segera lihat (status code 200)
     *         or Forbidden, anda tidak bisa melakukan operasi ini. (status code 403)
     *         or Server Error. (status code 500)
     */
    @Operation(
            operationId = "userGetRefreshPasswordToken",
            summary = "User lupa password dan ingin memperbarui password dengan meminta reset_password_token, diidentifikasi dengan id di cookie.",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Token dikirim di email. Segera lihat", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserGetRefreshPasswordToken200Response.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden, anda tidak bisa melakukan operasi ini.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error403Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/auth/password",
            produces = { "application/json" }
    )

    default ResponseEntity<UserGetRefreshPasswordToken200Response> _userGetRefreshPasswordToken(
            @NotNull @Parameter(name = "userId", description = "User ID", required = true, in = ParameterIn.COOKIE) @CookieValue(name = "userId") Long userId
    ) {
        return userGetRefreshPasswordToken(userId);
    }

    // Override this method
    default  ResponseEntity<UserGetRefreshPasswordToken200Response> userGetRefreshPasswordToken(Long userId) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"id\" : 0 }, \"success\" : true, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/auth/login : User/blogger mencoba untuk login.
     *
     * @param userLoginRequest  (optional)
     * @return User berhasil login (status code 200)
     *         or Pengisian field tidak sesuai. (status code 400)
     *         or Username, Email atau Password salah. (status code 401)
     *         or Server Error. (status code 500)
     */
    @Operation(
            operationId = "userLogin",
            summary = "User/blogger mencoba untuk login.",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "User berhasil login", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister200Response.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Pengisian field tidak sesuai.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister400Response.class))
                    }),
                    @ApiResponse(responseCode = "401", description = "Username, Email atau Password salah.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error401Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/v1/auth/login",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<UserRegister200Response> _userLogin(
            @Parameter(name = "UserLoginRequest", description = "") @Valid @RequestBody(required = false) UserLoginRequest userLoginRequest
    ) {
        return userLogin(userLoginRequest);
    }

    // Override this method
    default  ResponseEntity<UserRegister200Response> userLogin(UserLoginRequest userLoginRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"role\" : \"BLOGGER\", \"is_enable\" : true, \"bio\" : \"Saya merupakan seorang programer...\", \"profile_picture\" : \"images.com/images.png\", \"id\" : 1, \"username\" : \"andriana\" }, \"success\" : true, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"message\" : \"Field tidak sesuai\", \"errors\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /api/v1/auth/logout : User mengirimkan permintaan logout, logout dilakukan dengan mengidentifikasi id dari cookie.
     *
     * @param userId User ID (required)
     * @return Logout sukses, Frontend tolong redirect (status code 200)
     *         or Forbidden, anda tidak bisa melakukan operasi ini. (status code 403)
     *         or Sever Error. (status code 500)
     */
    @Operation(
            operationId = "userLogout",
            summary = "User mengirimkan permintaan logout, logout dilakukan dengan mengidentifikasi id dari cookie.",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Logout sukses, Frontend tolong redirect", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Success200Response.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden, anda tidak bisa melakukan operasi ini.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error403Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Sever Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.GET,
            value = "/api/v1/auth/logout",
            produces = { "application/json" }
    )

    default ResponseEntity<Success200Response> _userLogout(
            @NotNull @Parameter(name = "userId", description = "User ID", required = true, in = ParameterIn.COOKIE) @CookieValue(name = "userId") Long userId
    ) {
        return userLogout(userId);
    }

    // Override this method
    default  ResponseEntity<Success200Response> userLogout(Long userId) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/auth/register : Register user/blogger baru
     *
     * @param userRegisterRequest  (optional)
     * @return Berhasil didaftarkan sebagai blogger (status code 200)
     *         or Pengisian field tidak sesuai. (status code 400)
     *         or Username atau Email sudah terdaftar. (status code 409)
     *         or Server Error. (status code 500)
     */
    @Operation(
            operationId = "userRegister",
            summary = "Register user/blogger baru",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "Berhasil didaftarkan sebagai blogger", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister200Response.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "Pengisian field tidak sesuai.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister400Response.class))
                    }),
                    @ApiResponse(responseCode = "409", description = "Username atau Email sudah terdaftar.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error401Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/v1/auth/register",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<UserRegister200Response> _userRegister(
            @Parameter(name = "UserRegisterRequest", description = "") @Valid @RequestBody(required = false) UserRegisterRequest userRegisterRequest
    ) {
        return userRegister(userRegisterRequest);
    }

    // Override this method
    default  ResponseEntity<UserRegister200Response> userRegister(UserRegisterRequest userRegisterRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"role\" : \"BLOGGER\", \"is_enable\" : true, \"bio\" : \"Saya merupakan seorang programer...\", \"profile_picture\" : \"images.com/images.png\", \"id\" : 1, \"username\" : \"andriana\" }, \"success\" : true, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"success\" : false, \"message\" : \"Field tidak sesuai\", \"errors\" : \"\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /api/v1/auth/password
     * User/blogger telah menerima token di email dan mengirimkan password baru
     *
     * @param userId User/blogger id yang diterima saat permintaan reset password (required)
     * @param renewPasswordRequest  (optional)
     * @return User berhasil reset kata sandi dan return profile (status code 200)
     *         or Forbidden, anda tidak bisa melakukan operasi ini. (status code 403)
     *         or Server Error. (status code 500)
     */
    @Operation(
            operationId = "userRenewThePassword",
            description = "User/blogger telah menerima token di email dan mengirimkan password baru",
            tags = { "UserController" },
            responses = {
                    @ApiResponse(responseCode = "200", description = "User berhasil reset kata sandi dan return profile", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = UserRegister200Response.class))
                    }),
                    @ApiResponse(responseCode = "403", description = "Forbidden, anda tidak bisa melakukan operasi ini.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error403Response.class))
                    }),
                    @ApiResponse(responseCode = "500", description = "Server Error.", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = Error500Response.class))
                    })
            }
    )
    @RequestMapping(
            method = RequestMethod.POST,
            value = "/api/v1/auth/password",
            produces = { "application/json" },
            consumes = { "application/json" }
    )

    default ResponseEntity<UserRegister200Response> _userRenewThePassword(
            @NotNull @Parameter(name = "userId", description = "User/blogger id yang diterima saat permintaan reset password", required = true, in = ParameterIn.COOKIE) @CookieValue(name = "userId") Long userId,
            @Parameter(name = "RenewPasswordRequest", description = "") @Valid @RequestBody(required = false) RenewPasswordRequest renewPasswordRequest
    ) {
        return userRenewThePassword(userId, renewPasswordRequest);
    }

    // Override this method
    default  ResponseEntity<UserRegister200Response> userRenewThePassword(Long userId, RenewPasswordRequest renewPasswordRequest) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"data\" : { \"role\" : \"BLOGGER\", \"is_enable\" : true, \"bio\" : \"Saya merupakan seorang programer...\", \"profile_picture\" : \"images.com/images.png\", \"id\" : 1, \"username\" : \"andriana\" }, \"success\" : true, \"message\" : \"message\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
